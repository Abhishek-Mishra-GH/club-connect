generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  avatar       String?
  city         String
  university   String
  Notification Notification[]
  Registration Registration[]
  following    Club[]         @relation("UserFollowing")
}

model Club {
  id           String         @id @default(cuid())
  name         String
  description  String
  email        String         @unique
  password     String
  category     String
  founded      Int
  memberCount  Int
  university   String
  city         String
  avatar       String?
  events       Event[]
  Notification Notification[]
  posts        Post[]
  followers    User[]         @relation("UserFollowing")
}

model Event {
  id            String         @id @default(cuid())
  description   String
  clubId        String
  date          DateTime
  location      String
  name          String
  image         String?
  status        EventStatus    @default(UPCOMING)
  club          Club           @relation(fields: [clubId], references: [id], onDelete: Cascade)
  registrations Registration[]
}

model Registration {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId, userId], map: "event_user_index")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  clubId    String
  createdAt DateTime @default(now())
  image     String?
  club      Club     @relation(fields: [clubId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  clubId    String?
  isRead    Boolean  @default(false)
  club      Club?    @relation(fields: [clubId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
}
